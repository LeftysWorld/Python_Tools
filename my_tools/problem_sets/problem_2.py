"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of
the even-valued terms.
"""


###########
# Library #
###########

def new_fibonacci(start, end):
    lst = []
    if start == 0: lst.extend((start,1))
    else: lst.extend(start)

    while lst[-1] < end:
        while len(lst) < 2:
            lst.extend((lst[0] + lst[0]))
        res = (lst[-1] + lst[-2])
        lst.append(res)
    return lst


def sum_of_even_fibonacci_numbers(lst):
    even_fibonacci_list = [i for i in lst if i % 2 == 0]
    sum_of_even_fibonacci = sum(even_fibonacci_list)
    return sum_of_even_fibonacci


##################################
# Script / Application / Program #
##################################

def main():
    do_you_even_fibonacci_bro = new_fibonacci(0, 10000)
    even_fibs = sum_of_even_fibonacci_numbers(do_you_even_fibonacci_bro)
    print even_fibs


if __name__ == '__main__':
    main()