# coding=utf-8
"""
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?
"""

###########
# Library #
###########


def split_number_to_list(n):
    string_the_number = str(n)
    lst = [int(digit) for digit in string_the_number]
    return lst


def create_list_sets(lst, n):
    new_lst = []
    if n > len(lst):
        new_lst = new_lst + lst
        return new_lst
    else:
        for k in range(len(lst) - n + 1):
            tmp = [lst[i+k] for i in range(n)]
            new_lst = new_lst + [tmp]
        return new_lst


def get_highest_value(lst):
    highest_value = 0
    for the_sum in lst:
        if multiply_item_in_list(the_sum) > highest_value:
            highest_value = multiply_item_in_list(the_sum)
    return highest_value


def multiply_item_in_list(lst):
    total = 1
    for i in lst:
        total *= i
    return total


##########
# Script #
##########

def main():
    string_n = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851" \
               "8438586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443" \
               "0435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486" \
               "6452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699" \
               "7208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706" \
               "3244157221553975369781797784617406495514929086256932197846862248283972241375657056057490261407972" \
               "9686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465" \
               "6748139191231628245861786645835912456652947654568284891288314260769004224219022671055626321111109" \
               "3705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133875" \
               "4992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428" \
               "252483600823257530420752963450"
    n = int(string_n)
    adjacent_number = 13
    number_split = split_number_to_list(n)
    list_sets = create_list_sets(number_split, adjacent_number)
    highest_value = get_highest_value(list_sets)
    print(highest_value)


if __name__ == '__main__':
    main()
